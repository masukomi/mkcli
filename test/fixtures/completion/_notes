#compdef notes
_notes(){
  typeset -A opt_args;
  local context state state_descr line ret=1;
  local actions options commands;

  options=(
    "(-p --package)"{-p=,--package=}"[File type completion]:file:_files -g '*.json'" 
    "(-f --file)"{-f=,--file=}"[File completion]:file:_files" 
    "(-d --directory)"{-d=,--directory=}"[Directory completion]:directory:_directories" 
    "(-H --host)"{-H=,--host=}"[Host completion]:host:_hosts" 
    "*"{-D=,--domain=}"[Domain completion]:domain:_domains" 
    "*"{-u=,--url=}"[URL completion]:url:_urls" 
    "(-h --help)"{-h,--help}"[Display help and exit]" 
    "--version[Print version and exit]"
  )

  actions=(
    "*:file:_files -g '*.md'"
  )

  _arguments \
    "1:cmd:->cmd" \
    "*::arg:->args" && ret=0;

  case $state in
    (cmd)
      commands=(
        "add:Add a note" 
        "del:Delete a note" 
        {ls,list}":List notes" 
        "show:Show a note" 
        "edit:Edit a note"
      )
      _describe "notes commands" commands && ret=0
      ;;
    (args)
      case "$words[1]" in
        add)
          options=(
            "(-t --type)"{-t=,--type=}"[Type of note to create]:value:_values select  'todo' 'bug' 'feature'"
            $options
          )
        ;;
        del)
        ;;
        ls|list)
          options=(
            "(--private --no-private)"{--private,--no-private}"[Include or exclude private notes]" 
            "--\[enable|disable\]-feature[Enable or disable a feature]"
            $options
          )

          _arguments \
            "1:cmd:->cmd" \
            "*::arg:->args" && ret=0;

          case $state in
            (cmd)
              commands=(
                "todo:Show todos" 
                "bug:Show bugs" 
                "feature:Show features"
              )
              _describe "list commands" commands && ret=0
              _arguments \
                $options \
                $actions && return 0;
              ;;
            (args)
              case "$words[1]" in
                todo)
                ;;
                bug)

                  _arguments \
                    "1:cmd:->cmd" \
                    "*::arg:->args" && ret=0;

                  case $state in
                    (cmd)
                      commands=(
                        "low:Low priority bugs" 
                        "medium:Medium priority bugs" 
                        "high:High priority bugs" 
                        "critical:Critical bugs"
                      )
                      _describe "bug commands" commands && ret=0
                      ;;
                    (args)
                      case "$words[1]" in
                        low)
                        ;;
                        medium)
                        ;;
                        high)
                        ;;
                        critical)
                        ;;
                      esac
                      ;;
                  esac
                ;;
                feature)
                ;;
              esac
              ;;
          esac
        ;;
        show)
        ;;
        edit)
        ;;
      esac
      ;;
  esac
  (( $ret == 1 )) && _arguments \
    $options \
    $actions && ret=0;
  return $ret;
}

_notes "$@"